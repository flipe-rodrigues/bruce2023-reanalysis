%% initialization
% close all;
clear;
clc;

%% load data
sufix = 'bhvOpto';
% sufix = 'bhvPharm';
% sufix = 'bhvPharmSex';
load(sprintf('trials_%s.mat',sufix));

%% plotting settings
plotindividualanimals = 0;

%% data pre-selection
% group_flags = arrayfun(@(x) contains(x,'control','ignorecase',true),...
%     string(trials.group));
% trials = trials(group_flags,:);

%% parse meta data

% groups
groups = unique(trials.group);
group_count = numel(groups);

% manipulations
manipulations = categories(trials.manipulation);
manipulation_count = numel(manipulations);

% sides
sides = unique(trials.choice.side);
side_count = numel(sides);

% categories
choicecategories = unique(trials.choice.category);
choicecategory_count = numel(choicecategories);

% intervals
intervals = unique(trials.interval);
interval_count = numel(intervals);

% delays
delay_labels = trials.delays.Properties.VariableNames;
delay_count = numel(delay_labels);

%% color settings

% sides
left_clr = [.15, .35, .75];
right_clr = [.95, .25, .25];
back_clr = [1,1,1] * .1;
hopper_clr = [1,.65,0];
port_clrs = [...
    left_clr;...
    right_clr;...
    back_clr;...
    hopper_clr;...
    ];

% categories
short_clr = [0, 1, 1] * .425;
long_clr = [1, 0, 0] * .65;
init_clr = back_clr;
category_clrs = [...
    short_clr;...
    long_clr;...
    init_clr;...
    hopper_clr;...
    ];

% manipulation
d1_clr = rgb('dodgerblue');
d2_clr = rgb('crimson');
ctrl_clr = rgb('darkslategray');
manipulation_clrs = [...
    ctrl_clr;...
    d1_clr;...
    d1_clr;...
    d1_clr;...
    d2_clr;...
    d2_clr;...
    d2_clr;...
    ];

%% time settings
roi = [0,24];
bin_count = 40;
time = linspace(roi(1),roi(2),bin_count);
dt = diff(time(1:2));

%% plot individual animal data
if plotindividualanimals
    
    % iterate through groups
    for gg = 1 : group_count
        group_flags = trials.group == groups(gg);
        
        % animals
        animals = unique(trials.animal(group_flags));
        animal_count = numel(animals);
        
        % iterate through animals
        for aa = 1 : animal_count
            if aa == animal_count + 1
                animal = 'big animal';
                animal_flags = true(size(trials.animal));
            else
                animal = animals(aa);
                animal_flags = trials.animal == animal;
            end
            
            %% meta data
            contingency = unique(trials.contingency(group_flags & animal_flags));
            group = unique(trials.group(group_flags & animal_flags));
            
            %% figure initialization
            figure(...
                'name',sprintf('%s (%s, %s)',animal,contingency,group),...
                'windowstyle','docked',...
                'numbertitle','off',...
                'color','w');
            
            %% axes initialization
            row_count = 6;
            col_count = 5;
            sp_raster_port = subplot(row_count,col_count,[1,1+col_count]);
            sp_raster_category = subplot(row_count,col_count,[2,2+col_count]);
            sp_raster_category_opto = subplot(row_count,col_count,[3,3+col_count]);
            sp_back_rate = subplot(row_count,col_count,1+col_count*2);
            sp_left_rate = subplot(row_count,col_count,1+col_count*3);
            sp_right_rate = subplot(row_count,col_count,1+col_count*4);
            sp_hopper_rate = subplot(row_count,col_count,1+col_count*5);
            sp_init_rate = subplot(row_count,col_count,2+col_count*2);
            sp_short_rate = subplot(row_count,col_count,2+col_count*3);
            sp_long_rate = subplot(row_count,col_count,2+col_count*4);
            sp_rwd_rate = subplot(row_count,col_count,2+col_count*5);
            sp_init_rate_opto = subplot(row_count,col_count,3+col_count*2);
            sp_short_rate_opto = subplot(row_count,col_count,3+col_count*3);
            sp_long_rate_opto = subplot(row_count,col_count,3+col_count*4);
            sp_rwd_rate_opto = subplot(row_count,col_count,3+col_count*5);
            sp_earlyswitch_departure_pdf = subplot(row_count,col_count,4+col_count*2);
            sp_earlyswitch_departure_cdf = subplot(row_count,col_count,4+col_count*3);
            sp_earlyswitch_arrival_pdf = subplot(row_count,col_count,4+col_count*4);
            sp_earlyswitch_arrival_cdf = subplot(row_count,col_count,4+col_count*5);
            sp_lateswitch_departure_pdf = subplot(row_count,col_count,5+col_count*2);
            sp_lateswitch_departure_cdf = subplot(row_count,col_count,5+col_count*3);
            sp_lateswitch_arrival_pdf = subplot(row_count,col_count,5+col_count*4);
            sp_lateswitch_arrival_cdf = subplot(row_count,col_count,5+col_count*5);
            sp_delays = gobjects(1,delay_count);
            for ii = 1 : delay_count
                sp_idcs = unique(3 * delay_count + ...
                    col_count * delay_count * [0,1] + [1,2]' + (ii - 1) * 2);
                sp_delays(ii) = subplot(row_count,col_count*delay_count,sp_idcs);
                title(sp_delays(ii),delay_labels{ii},...
                    'rotation',45);
            end
            
            % axes grouping
            sps = [...
                sp_raster_port,...
                sp_raster_category,...
                sp_raster_category_opto,...
                sp_back_rate,...
                sp_left_rate,...
                sp_right_rate,...
                sp_hopper_rate,...
                sp_init_rate,...
                sp_short_rate,...
                sp_long_rate,...
                sp_rwd_rate,...
                sp_init_rate_opto,...
                sp_short_rate_opto,...
                sp_long_rate_opto,...
                sp_rwd_rate_opto,...
                sp_earlyswitch_departure_pdf,...
                sp_earlyswitch_arrival_pdf,...
                sp_earlyswitch_departure_cdf,...
                sp_earlyswitch_arrival_cdf,...
                sp_lateswitch_departure_pdf,...
                sp_lateswitch_arrival_pdf,...
                sp_lateswitch_departure_cdf,...
                sp_lateswitch_arrival_cdf,...
                sp_delays];
            sp_count = numel(sps);
            
            % axes settings
            set(sps,...
                'xlim',roi,...
                'xtick',unique([roi,trials.interval',0]),...
                'ylimspec','tight',...
                'nextplot','add',...
                'color','none',...
                'fontsize',10,...
                'linewidth',2,...
                'layer','top',...
                'box','off',...
                'tickdir','out');
            set(sp_delays,...
                'xlim',[1,2]+[-1,1],...
                'xtick',[1,2],...
                'xticklabel',unique(trials.manipulation(group_flags)),...
                'xticklabelrotation',45,...
                'xcolor','none',...
                'ycolor','k');
            
            % axes labels
            if contains(cellstr(contingency),'6R')
                contingency_clr = right_clr;
            else
                contingency_clr = left_clr;
            end
            title(sp_raster_port,...
                sprintf('%s (%s, %s)',animal,contingency,group),...
                'color',contingency_clr);
            xlabel(sp_hopper_rate,'Time (s)');
            xlabel(sp_rwd_rate,'Time (s)');
            xlabel(sp_rwd_rate_opto,'Time (s)');
            xlabel(sp_earlyswitch_arrival_cdf,'Time (s)');
            xlabel(sp_lateswitch_arrival_cdf,'Time (s)');
            ylabel(sp_raster_port,'Trial # (chrono)');
            ylabel(sp_raster_category,'Trial # (interval, reward)');
            ylabel(sp_raster_category_opto,...
                'Trial # (interval, manipulation, reward, reaction)');
            ylabel(sp_back_rate,'Response rate (Hz)');
            ylabel(sp_left_rate,'Response rate (Hz)');
            ylabel(sp_right_rate,'Response rate (Hz)');
            ylabel(sp_hopper_rate,'Response rate (Hz)');
            ylabel(sp_init_rate,'Response rate (Hz)');
            ylabel(sp_short_rate,'Response rate (Hz)');
            ylabel(sp_long_rate,'Response rate (Hz)');
            ylabel(sp_rwd_rate,'Response rate (Hz)');
            ylabel(sp_init_rate_opto,'Response rate (Hz)');
            ylabel(sp_short_rate_opto,'Response rate (Hz)');
            ylabel(sp_long_rate_opto,'Response rate (Hz)');
            ylabel(sp_rwd_rate_opto,'Response rate (Hz)');
            ylabel(sp_earlyswitch_departure_pdf,'PDF');
            ylabel(sp_earlyswitch_arrival_pdf,'PDF');
            ylabel(sp_earlyswitch_departure_cdf,'CDF');
            ylabel(sp_earlyswitch_arrival_cdf,'CDF');
            ylabel(sp_lateswitch_departure_pdf,'PDF');
            ylabel(sp_lateswitch_arrival_pdf,'PDF');
            ylabel(sp_lateswitch_departure_cdf,'CDF');
            ylabel(sp_lateswitch_arrival_cdf,'CDF');
            
            % session delims
            session_transition_flags = ...
                [diff(trials.session(group_flags & animal_flags))~=0;true];
            session_transition_idcs = find(session_transition_flags);
            set(sp_raster_port,...
                'ytick',session_transition_idcs);
            
            %% response time raster (conditioned on choice side)
            
            % trial selection
            trial_flags = ...
                group_flags & ...
                animal_flags;
            selected_trials = trials(trial_flags,:);
            
            % trial sorting
            trial_sorter = [...
                selected_trials.session,...
                selected_trials.index,...
                selected_trials.reward.flag,...
                selected_trials.interval];
            [~,sorted_idcs] = sortrows(trial_sorter,[1,2]);
            selected_trials = selected_trials(sorted_idcs,:);
            
            % plot response time raster
            plotresponseraster(sp_raster_port,...
                selected_trials,'port',port_clrs);
            
            %% response time raster (conditioned on & sorted by choice category)
            
            % trial selection
            trial_flags = ...
                group_flags & ...
                animal_flags;
            selected_trials = trials(trial_flags,:);
            
            % trial sorting
            trial_sorter = [...
                selected_trials.interval,...
                selected_trials.reward.flag];
            [~,sorted_idcs] = sortrows(trial_sorter);
            selected_trials = selected_trials(sorted_idcs,:);
            
            % plot response time raster
            plotresponseraster(sp_raster_category,...
                selected_trials,'category',category_clrs);
            
            %% response time raster (conditioned on & sorted by manipulation)
            
            % trial selection
            trial_flags = ...
                group_flags & ...
                animal_flags;
            selected_trials = trials(trial_flags,:);
            
            % trial sorting
            trial_sorter = [...
                selected_trials.interval,...
                double(selected_trials.manipulation),...
                selected_trials.reward.flag,...
                selected_trials.delays.('reaction time')];
            [~,sorted_idcs] = sortrows(trial_sorter);
            selected_trials = selected_trials(sorted_idcs,:);
            
            % plot response time raster
            plotresponseraster(sp_raster_category_opto,...
                selected_trials,'category',category_clrs);
            
            % plot raster bands
            plotrasterbands(sp_raster_category_opto,...
                selected_trials,'manipulation',manipulation_clrs);
            
            %% response rates (conditioned on choice port)
            
            % trial selection
            trial_flags = ...
                group_flags & ...
                animal_flags;
            selected_trials = trials(trial_flags,:);
            
            % plot response rate
            plotresponserate(sp_back_rate,...
                selected_trials,...
                {'port','back'},...
                'port',...
                port_clrs);
            plotresponserate(sp_left_rate,...
                selected_trials,...
                {'port','left'},...
                'port',...
                port_clrs);
            plotresponserate(sp_right_rate,...
                selected_trials,...
                {'port','right'},...
                'port',...
                port_clrs);
            plotresponserate(sp_hopper_rate,...
                selected_trials,...
                {'port','hopper'},...
                'port',...
                port_clrs);
            
            % pseudo legends
            text(sp_back_rate,...
                .5,1,sprintf('%s','back port \rightarrow'),...
                'color',back_clr,...
                'units','normalized',...
                'horizontalalignment','center',...
                'verticalalignment','middle');
            text(sp_left_rate,...
                .5,1,sprintf('%s','left port'),...
                'color',left_clr,...
                'units','normalized',...
                'horizontalalignment','center',...
                'verticalalignment','middle');
            text(sp_right_rate,...
                .5,1,sprintf('%s','right port'),...
                'color',right_clr,...
                'units','normalized',...
                'horizontalalignment','center',...
                'verticalalignment','middle');
            text(sp_hopper_rate,...
                .5,1,sprintf('%s','food hopper \rightarrow'),...
                'color',hopper_clr,...
                'units','normalized',...
                'horizontalalignment','center',...
                'verticalalignment','middle');
            
            %% response rates (conditioned on choice category)
            
            % trial selection
            trial_flags = ...
                group_flags & ...
                animal_flags & ...
                trials.reward.flag;
            selected_trials = trials(trial_flags,:);
            
            % plot response rate
            plotresponserate(sp_init_rate,...
                selected_trials,...
                {'port','back'},...
                'port',...
                port_clrs);
            plotresponserate(sp_short_rate,...
                selected_trials,...
                {'category','short'},...
                'category',...
                category_clrs);
            plotresponserate(sp_long_rate,...
                selected_trials,...
                {'category','long'},...
                'category',...
                category_clrs);
            plotresponserate(sp_rwd_rate,...
                selected_trials,...
                {'port','hopper'},...
                'port',...
                port_clrs);
            
            % pseudo legends
            text(sp_short_rate,...
                .5,1,sprintf('%s','short port \rightarrow'),...
                'color',short_clr,...
                'units','normalized',...
                'horizontalalignment','center',...
                'verticalalignment','middle');
            text(sp_long_rate,...
                .5,1,sprintf('%s','long port \rightarrow'),...
                'color',long_clr,...
                'units','normalized',...
                'horizontalalignment','center',...
                'verticalalignment','middle');
            
            %% response rates (conditioned on manipulation condition)
            
            % trial selection
            trial_flags = ...
                group_flags & ...
                animal_flags & ...
                trials.reward.flag & ...
                trials.interval == max(intervals);
            selected_trials = trials(trial_flags,:);
            
            % plot response rate
            plotresponserate(sp_init_rate_opto,...
                selected_trials,...
                {'port','back'},...
                'manipulation',...
                manipulation_clrs);
            plotresponserate(sp_short_rate_opto,...
                selected_trials,...
                {'category','short'},...
                'manipulation',...
                manipulation_clrs);
            plotresponserate(sp_long_rate_opto,...
                selected_trials,...
                {'category','long'},...
                'manipulation',...
                manipulation_clrs);
            plotresponserate(sp_rwd_rate_opto,...
                selected_trials,...
                {'port','hopper'},...
                'manipulation',...
                manipulation_clrs);
            
            % pseudo legends
            text(sp_init_rate_opto,...
                .5,1,sprintf('%s','control'),...
                'color',ctrl_clr,...
                'units','normalized',...
                'horizontalalignment','center',...
                'verticalalignment','middle');
            flags = manipulations == unique(...
                selected_trials.manipulation(selected_trials.manipulation~='control'));
            text(sp_init_rate_opto,...
                .5,.85,sprintf('%s',manipulations{flags}),...
                'color',manipulation_clrs(flags,:),...
                'units','normalized',...
                'horizontalalignment','center',...
                'verticalalignment','middle');
            
            %% plot switch time distributions
            
            % trial selection
            trial_flags = ...
                group_flags & ...
                animal_flags & ...
                trials.reward.flag & ...
                ...~isnan(trials.switch.late.departure) & ...
                trials.interval == max(intervals);
            selected_trials = trials(trial_flags,:);
            
            % plot early switch departure times
            plotswitchtimes(...
                sp_earlyswitch_departure_pdf,sp_earlyswitch_departure_cdf,...
                selected_trials,...
                {'early','departure'},...
                'manipulation',...
                manipulation_clrs);
            
            % plot early switch arrival times
            plotswitchtimes(...
                sp_earlyswitch_arrival_pdf,sp_earlyswitch_arrival_cdf,...
                selected_trials,...
                {'early','arrival'},...
                'manipulation',...
                manipulation_clrs);
            
            % plot late switch departure times
            plotswitchtimes(...
                sp_lateswitch_departure_pdf,sp_lateswitch_departure_cdf,...
                selected_trials,...
                {'late','departure'},...
                'manipulation',...
                manipulation_clrs);
            
            % plot late switch arrival times
            plotswitchtimes(...
                sp_lateswitch_arrival_pdf,sp_lateswitch_arrival_cdf,...
                selected_trials,...
                {'late','arrival'},...
                'manipulation',...
                manipulation_clrs);
            
            % pseudo legends
            text(sp_earlyswitch_departure_pdf,...
                .5,1,sprintf('%s','Early switch departure times'),...
                'color','k',...
                'units','normalized',...
                'horizontalalignment','center',...
                'verticalalignment','middle');
            text(sp_earlyswitch_arrival_pdf,...
                .5,1,sprintf('%s','Early switch arrival times'),...
                'color','k',...
                'units','normalized',...
                'horizontalalignment','center',...
                'verticalalignment','middle');
            text(sp_lateswitch_departure_pdf,...
                .5,1,sprintf('%s','Late switch departure times'),...
                'color','k',...
                'units','normalized',...
                'horizontalalignment','center',...
                'verticalalignment','middle');
            text(sp_lateswitch_arrival_pdf,...
                .5,1,sprintf('%s','Late switch arrival times'),...
                'color','k',...
                'units','normalized',...
                'horizontalalignment','center',...
                'verticalalignment','middle');
            
            %% summary vigor metrics
            
            % trial selection
            trial_flags = ...
                group_flags & ...
                animal_flags;
            selected_trials = trials(trial_flags,:);
            
            % parse delay meta data
            delay_labels = selected_trials.delays.Properties.VariableNames;
            delay_count = numel(delay_labels);
            
            % iterate through delays
            for dd = 1 : delay_count
                
                % preallocation
                delay_meds = nan(manipulation_count,1);
                delay_iqrs = nan(manipulation_count,2);
                
                % iterate through manipulation conditions
                for ii = 1 : manipulation_count
                    manipulation_flags = selected_trials.manipulation == manipulations(ii);
                    if sum(manipulation_flags) == 0
                        continue;
                    end
                    
                    % trial data selection
                    delays = selected_trials.delays.(delay_labels{dd})(manipulation_flags);
                    if iscell(delays)
                        delays = vertcat(delays{:});
                    end
                    
                    % compute summary statistics
                    delay_meds(ii) = median(delays,'omitnan');
                    delay_iqrs(ii,:) = quantile(delays,[.25,.75]) - delay_meds(ii);
                end
                
                % plot medians
                plot(sp_delays(dd),...
                    delay_meds(~isnan(delay_meds)),...
                    'color','k',...
                    'marker','none',...
                    'linewidth',1.5);
                
                % iterate through manipulation conditions
                manipulation_idx = 1;
                for ii = 1 : manipulation_count
                    if isnan(delay_meds(ii))
                        continue;
                    end
                    
                    % plot median and IQR
                    errorbar(sp_delays(dd),...
                        manipulation_idx,delay_meds(ii),...
                        delay_iqrs(ii,1),delay_iqrs(ii,2),...
                        'color',manipulation_clrs(ii,:),...
                        'marker','o',...
                        'markerfacecolor',manipulation_clrs(ii,:),...
                        'markeredgecolor','k',...
                        'linewidth',1.5,...
                        'capsize',0);
                    manipulation_idx = manipulation_idx + 1;
                end
                
                % update axes settings
                set(sp_delays(dd),...
                    'ylim',ylim(sp_delays(dd))+[-1,1]*.05*range(ylim(sp_delays(dd))));
            end
        end
    end
end

%% plot group data

% iterate through groups
for gg = 1 : group_count
    group_flags = trials.group == groups(gg);
    
    % animals
    animals = unique(trials.animal(group_flags));
    animal_count = numel(animals);
    
    %% meta data
    contingency = unique(trials.contingency(group_flags));
    group = unique(trials.group(group_flags));
    
    %% figure initialization
    figure(...
        'name',sprintf('%s',group),...
        'windowstyle','docked',...
        'numbertitle','off',...
        'color','w');
    
    %% axes initialization
    row_count = 4;
    col_count = 5;
    sp_raster = subplot(row_count,col_count,[1,1+col_count.*(1:row_count-2)]);
    sp_performance = subplot(row_count,col_count,1+col_count*3);
    sp_init_rate_opto = subplot(row_count,col_count,2+col_count*0);
    sp_short_rate_opto = subplot(row_count,col_count,2+col_count*1);
    sp_long_rate_opto = subplot(row_count,col_count,2+col_count*2);
    sp_rwd_rate_opto = subplot(row_count,col_count,2+col_count*3);
    sp_earlyswitch_departure_pdf = subplot(row_count,col_count,3+col_count*0);
    sp_earlyswitch_departure_cdf = subplot(row_count,col_count,3+col_count*1);
    sp_earlyswitch_arrival_pdf = subplot(row_count,col_count,3+col_count*2);
    sp_earlyswitch_arrival_cdf = subplot(row_count,col_count,3+col_count*3);
    sp_lateswitch_departure_pdf = subplot(row_count,col_count,4+col_count*0);
    sp_lateswitch_departure_cdf = subplot(row_count,col_count,4+col_count*1);
    sp_lateswitch_arrival_pdf = subplot(row_count,col_count,4+col_count*2);
    sp_lateswitch_arrival_cdf = subplot(row_count,col_count,4+col_count*3);
    sp_delays = gobjects(1,delay_count);
    for ii = 1 : delay_count
        sp_idcs = unique(4 * 2 + (2 - mod(ii,2)) + ...
            (ceil(ii/2) - 1) * col_count * 2);
        sp_delays(ii) = subplot(row_count,col_count*2,sp_idcs);
        ylabel(sp_delays(ii),sprintf('%s (s)',delay_labels{ii}));
    end
    
    % axes grouping
    sps = [...
        sp_raster,...
        sp_performance,...
        sp_init_rate_opto,...
        sp_short_rate_opto,...
        sp_long_rate_opto,...
        sp_rwd_rate_opto,...
        sp_earlyswitch_departure_pdf,...
        sp_earlyswitch_arrival_pdf,...
        sp_earlyswitch_departure_cdf,...
        sp_earlyswitch_arrival_cdf,...
        sp_lateswitch_departure_pdf,...
        sp_lateswitch_arrival_pdf,...
        sp_lateswitch_departure_cdf,...
        sp_lateswitch_arrival_cdf,...
        sp_delays];
    sp_count = numel(sps);
    
    % axes settings
    set(sps,...
        'xlim',roi,...
        'xtick',unique([roi,trials.interval',0]),...
        'ylimspec','tight',...
        'nextplot','add',...
        'color','none',...
        'fontsize',10,...
        'linewidth',2,...
        'layer','top',...
        'box','off',...
        'tickdir','out');
    set(sp_performance,...
        'ylim',[.5,1],...
        'clipping','off');
    set([sp_performance,sp_delays],...
        'xlim',[1,2]+[-1,1],...
        'xtick',[1,2],...
        'xticklabel',unique(trials.manipulation(group_flags)),...
        'xticklabelrotation',45,...
        'xcolor','none',...
        'ycolor','k');
    
    % parse manipulation
    manipulation = unique(...
        trials.manipulation(group_flags & trials.manipulation ~= 'control'));
    
    % axes labels
    title(sp_raster,sprintf('%s',manipulation),...
        'color',manipulation_clrs(manipulations==manipulation,:));
    title(sp_init_rate_opto,'Back port',...
        'color',back_clr);
    title(sp_short_rate_opto,'Short port',...
        'color',short_clr);
    title(sp_long_rate_opto,'Long port',...
        'color',long_clr);
    title(sp_rwd_rate_opto,'Food hopper',...
        'color',hopper_clr);
    title(sp_earlyswitch_departure_pdf,'Early switch departures');
    title(sp_earlyswitch_arrival_pdf,'Early switch arrivals');
    title(sp_lateswitch_departure_pdf,'Late switch departures');
    title(sp_lateswitch_arrival_pdf,'Late switch arrivals');
    xlabel(sp_raster,'Time (s)');
    xlabel(sp_performance,'Manipulation target');
    xlabel(sp_rwd_rate_opto,'Time (s)');
    xlabel(sp_earlyswitch_arrival_cdf,'Time (s)');
    xlabel(sp_lateswitch_arrival_cdf,'Time (s)');
    ylabel(sp_raster,...
        'Trial # (animal, interval, manipulation, reward, reaction)');
    ylabel(sp_performance,'P(correct)');
    ylabel(sp_init_rate_opto,'Response rate (Hz)');
    ylabel(sp_short_rate_opto,'Response rate (Hz)');
    ylabel(sp_long_rate_opto,'Response rate (Hz)');
    ylabel(sp_rwd_rate_opto,'Response rate (Hz)');
    ylabel(sp_earlyswitch_departure_pdf,'PDF');
    ylabel(sp_earlyswitch_arrival_pdf,'PDF');
    ylabel(sp_earlyswitch_departure_cdf,'CDF');
    ylabel(sp_earlyswitch_arrival_cdf,'CDF');
    ylabel(sp_lateswitch_departure_pdf,'PDF');
    ylabel(sp_lateswitch_arrival_pdf,'PDF');
    ylabel(sp_lateswitch_departure_cdf,'CDF');
    ylabel(sp_lateswitch_arrival_cdf,'CDF');
    
    % session delims
    animal_transition_flags = ...
        [diff(double(trials.animal(group_flags)))~=0;true];
    animal_transition_idcs = find(animal_transition_flags);
    set(sp_raster,...
        'ytick',animal_transition_idcs);
    
    %% response time raster (conditioned on manipulation)
    
    % trial selection
    trial_flags = ...
        group_flags;
    selected_trials = trials(trial_flags,:);
    
    % trial sorting
    trial_sorter = [...
        double(selected_trials.animal),...
        selected_trials.interval,...
        double(selected_trials.manipulation),...
        selected_trials.reward.flag,...
        selected_trials.delays.('reaction time')];
    [~,sorted_idcs] = sortrows(trial_sorter);
    selected_trials = selected_trials(sorted_idcs,:);
        
    % plot reward collection times
    plot(sp_raster,...
        selected_trials.reward.('collection time'),...
        1:size(selected_trials,1),...
        'color',hopper_clr,...
        'marker','.',...
        'markersize',5,...
        'linestyle','none');
    
    % plot response time raster
    plotresponseraster(sp_raster,...
        selected_trials,'category',category_clrs);
    
    % plot raster bands
    plotrasterbands(sp_raster,...
        selected_trials,'manipulation',manipulation_clrs);

    %% performance (conditioned on manipulation condition)
    
    % preallocation
    performance = nan(manipulation_count,animal_count);
    
    % plot chance level
    plot(sp_performance,...
        xlim(sp_performance),[1,1]*.5,'--k');
    
    % iterate through animals
    for aa = 1 : animal_count
        animal = animals(aa);
        animal_flags = trials.animal == animal;
        
        % iterate through manipulation conditions
        for ii = 1 : manipulation_count
            manipulation_flags = trials.manipulation == manipulations(ii);
            trial_flags = ...
                group_flags & ...
                animal_flags & ...
                manipulation_flags;
            if sum(trial_flags) == 0
                continue;
            end
            
            % compute summary statistics
            performance(ii,aa) = ...
                mean(trials.reward.flag(trial_flags),'omitnan');
        end
        
        % plot average performance
        plot(sp_performance,...
            performance(~isnan(performance(:,aa)),aa),...
            'color','k',...
            'marker','none',...
            'linewidth',1.5);
        
        % iterate through manipulation conditions
        manipulation_idx = 1;
        for ii = 1 : manipulation_count
            if isnan(performance(ii,aa))
                continue;
            end
            
            % plot median
            plot(sp_performance,...
                manipulation_idx,performance(ii,aa),...
                'color',manipulation_clrs(ii,:),...
                'marker','o',...
                'markerfacecolor',manipulation_clrs(ii,:),...
                'markeredgecolor','k',...
                'linewidth',1.5);
            manipulation_idx = manipulation_idx + 1;
        end
    end
    
    % iterate through manipulation conditions
    manipulation_idx = 1;
    for ii = 1 : manipulation_count
        
        % compute mean and SEM
        perf_mu = mean(performance(ii,:),'omitnan');
        perf_sem = std(performance(ii,:),0,'omitnan') ./ sqrt(animal_count);
        if isnan(perf_mu)
            continue;
        end
        
        % plot mean and SEM
        p = errorbar(sp_performance,...
            manipulation_idx,perf_mu,perf_sem,...
            'color',manipulation_clrs(ii,:),...
            'marker','s',...
            'markersize',15,...
            'markerfacecolor',manipulation_clrs(ii,:),...
            'markeredgecolor','w',...
            'linewidth',1.5,...
            'capsize',0);
        manipulation_idx = manipulation_idx + 1;
        uistack(p,'bottom');
    end
    
    % paired-sample t-test
    X = performance(any(~isnan(performance),2),:)';
    [~,pval] = ttest(X(:,1),X(:,2));
    if pval < .01
        text(sp_performance,...
            .5,1,'**',...
            'color','k',...
            'fontsize',15,...
            'fontweight','bold',...
            'units','normalized',...
            'horizontalalignment','center',...
            'verticalalignment','middle');
    elseif pval < .05
        text(sp_performance,...
            .5,1,'*',...
            'color','k',...
            'fontsize',15,...
            'fontweight','bold',...
            'units','normalized',...
            'horizontalalignment','center',...
            'verticalalignment','middle');
    end
    
    % update axes settings
    set(sp_performance,...
        'ylim',ylim(sp_performance)+[-1,1]*.05*range(ylim(sp_performance)));
    
    %% response rates (conditioned on manipulation condition)
    
    % trial selection
    trial_flags = ...
        group_flags & ...
        trials.reward.flag & ...
        trials.interval == max(intervals);
    selected_trials = trials(trial_flags,:);
    
    % plot response rate
    plotresponserate(sp_init_rate_opto,...
        selected_trials,...
        {'port','back'},...
        'manipulation',...
        manipulation_clrs);
    plotresponserate(sp_short_rate_opto,...
        selected_trials,...
        {'category','short'},...
        'manipulation',...
        manipulation_clrs);
    plotresponserate(sp_long_rate_opto,...
        selected_trials,...
        {'category','long'},...
        'manipulation',...
        manipulation_clrs);
    plotresponserate(sp_rwd_rate_opto,...
        selected_trials,...
        {'port','hopper'},...
        'manipulation',...
        manipulation_clrs);
    
    %% plot switch time distributions
    
    % trial selection
    trial_flags = ...
        group_flags & ...
        trials.reward.flag & ...
        trials.interval == max(intervals);
    selected_trials = trials(trial_flags,:);
    
    % plot early switch departure times
    plotswitchtimes(...
        sp_earlyswitch_departure_pdf,sp_earlyswitch_departure_cdf,...
        selected_trials,...
        {'early','departure'},...
        'manipulation',...
        manipulation_clrs);
    
    % plot early switch arrival times
    plotswitchtimes(...
        sp_earlyswitch_arrival_pdf,sp_earlyswitch_arrival_cdf,...
        selected_trials,...
        {'early','arrival'},...
        'manipulation',...
        manipulation_clrs);
    
    % plot late switch departure times
    plotswitchtimes(...
        sp_lateswitch_departure_pdf,sp_lateswitch_departure_cdf,...
        selected_trials,...
        {'late','departure'},...
        'manipulation',...
        manipulation_clrs);
    
    % plot late switch arrival times
    plotswitchtimes(...
        sp_lateswitch_arrival_pdf,sp_lateswitch_arrival_cdf,...
        selected_trials,...
        {'late','arrival'},...
        'manipulation',...
        manipulation_clrs);
    
    %% summary vigor metrics
    
    % iterate through delays
    for dd = 1 : delay_count
        
        % preallocation
        delay_meds = nan(manipulation_count,animal_count);
        
        % iterate through animals
        for aa = 1 : animal_count
            animal = animals(aa);
            animal_flags = trials.animal == animal;
            
            % trial selection
            trial_flags = ...
                group_flags & ...
                animal_flags;
            selected_trials = trials(trial_flags,:);
            
            % iterate through manipulation conditions
            for ii = 1 : manipulation_count
                manipulation_flags = selected_trials.manipulation == manipulations(ii);
                if sum(manipulation_flags) == 0
                    continue;
                end
                
                % trial data selection
                delays = selected_trials.delays.(delay_labels{dd})(manipulation_flags);
                if iscell(delays)
                    delays = vertcat(delays{:});
                end
                
                % compute summary statistics
                delay_meds(ii,aa) = median(delays,'omitnan');
            end
            
            % plot medians
            plot(sp_delays(dd),...
                delay_meds(~isnan(delay_meds(:,aa)),aa),...
                'color','k',...
                'marker','none',...
                'linewidth',1.5);
            
            % iterate through manipulation conditions
            manipulation_idx = 1;
            for ii = 1 : manipulation_count
                if isnan(delay_meds(ii,aa))
                    continue;
                end
                
                % plot median
                plot(sp_delays(dd),...
                    manipulation_idx,delay_meds(ii,aa),...
                    'color',manipulation_clrs(ii,:),...
                    'marker','o',...
                    'markerfacecolor',manipulation_clrs(ii,:),...
                    'markeredgecolor','k',...
                    'linewidth',1.5);
                manipulation_idx = manipulation_idx + 1;
            end
        end
        
        % iterate through manipulation conditions
        manipulation_idx = 1;
        for ii = 1 : manipulation_count
            
            % compute mean and SEM
            delay_mu = mean(delay_meds(ii,:),'omitnan');
            delay_sem = std(delay_meds(ii,:),0,'omitnan') ./ sqrt(animal_count);
            if isnan(delay_mu)
                continue;
            end
            
            % plot mean and SEM
            p = errorbar(sp_delays(dd),...
                manipulation_idx,delay_mu,delay_sem,...
                'color',manipulation_clrs(ii,:),...
                'marker','s',...
                'markersize',15,...
                'markerfacecolor',manipulation_clrs(ii,:),...
                'markeredgecolor','w',...
                'linewidth',1.5,...
                'capsize',0);
            manipulation_idx = manipulation_idx + 1;
            uistack(p,'bottom');
        end
        
        % paired-sample t-test
        X = delay_meds(any(~isnan(delay_meds),2),:)';
        [~,pval] = ttest(X(:,1),X(:,2));
        if pval < .01
            text(sp_delays(dd),...
                .5,1,'**',...
                'color','k',...
                'fontsize',15,...
                'fontweight','bold',...
                'units','normalized',...
                'horizontalalignment','center',...
                'verticalalignment','middle');
        elseif pval < .05
            text(sp_delays(dd),...
                .5,1,'*',...
                'color','k',...
                'fontsize',15,...
                'fontweight','bold',...
                'units','normalized',...
                'horizontalalignment','center',...
                'verticalalignment','middle');
        end
        
        % update axes settings
        set(sp_delays(dd),...
            'ylim',ylim(sp_delays(dd))+[-1,1]*.05*range(ylim(sp_delays(dd))));
    end
end

%% plotting functions: response time raster
function plotresponseraster(ax,...
    selected_trials,...
    condition_label,...
    condition_clrs)

% fetch relevant trial data
trial_idcs = (1 : size(selected_trials,1))';
trial_intervals = selected_trials.interval;

% fetch relevant response data
response_times = vertcat(selected_trials.responses.time{:});
response_trials = cellfun(@(x,y)repmat(x,numel(y),1),...
    num2cell(trial_idcs),selected_trials.responses.time,...
    'uniformoutput',false);
response_trials = vertcat(response_trials{:});
response_durations = vertcat(selected_trials.responses.duration{:});
response_conditions = ...
    vertcat(selected_trials.responses.(condition_label){:});

% parse conditions
if iscategorical(response_conditions)
    condition_set = categories(response_conditions);
else
    condition_set = unique(response_conditions);
end
condition_count = numel(condition_set);

% iterate through conditions
for kk = 1 : condition_count
    response_flags = response_conditions == condition_set(kk);
    
    % plot response times
    plot(ax,...
        response_times(response_flags),...
        response_trials(response_flags),...
        'color',condition_clrs(kk,:),...
        'marker','.',...
        'markersize',1,...
        'linestyle','none');
    
    % plot response durations
    x = [response_times(response_flags),...
        response_times(response_flags)+...
        response_durations(response_flags)]';
    y = repmat(response_trials(response_flags),1,2)';
    plot(ax,...
        x,y,...
        'color',condition_clrs(kk,:),...
        'linestyle','-',...
        'linewidth',.1);
end

% plot intervals
plot(ax,...
    trial_intervals,trial_idcs,...
    'color','k',...
    'marker','.',...
    'markersize',5,...
    'linestyle','none');
end

%% plotting functions: raster bands
function plotrasterbands(ax,...
    selected_trials,...
    condition_label,...
    condition_clrs)

% fetch relevant trial data
trial_idcs = (1 : size(selected_trials,1))';
trial_intervals = selected_trials.interval;
trial_conditions = selected_trials.(condition_label);

% parse conditions
if iscategorical(trial_conditions)
    condition_set = categories(trial_conditions);
else
    condition_set = unique(trial_conditions);
end
condition_count = numel(condition_set);

% iterate through conditions
for kk = 1 : condition_count
    condition_flags = trial_conditions == condition_set(kk);
    
    % plot intervals
    plot(ax,...
        trial_intervals(condition_flags),trial_idcs(condition_flags),...
        'color',condition_clrs(kk,:),...
        'marker','.',...
        'markersize',5,...
        'linestyle','none');
end
end

%% plotting functions: response rate
function plotresponserate(ax,...
    selected_trials,...
    selection_dictionary,...
    condition_label,...
    condition_clrs)

% bin settings
binedges = linspace(0,24,30);
binwidth = diff(binedges(1:2));

% fetch relevant trial data
trial_idcs = (1 : size(selected_trials,1))';

% fetch relevant response data
response_times = vertcat(selected_trials.responses.time{:});
response_trials = cellfun(@(x,y)repmat(x,numel(y),1),...
    num2cell(trial_idcs),selected_trials.responses.time,...
    'uniformoutput',false);
response_trials = vertcat(response_trials{:});
response_conditions = ...
    vertcat(selected_trials.responses.(condition_label){:});

% parse pre-selection criteria
selection_label = selection_dictionary{1};
selection_value = selection_dictionary{2};
selection_flags = vertcat(...
    selected_trials.responses.(selection_label){:}) == selection_value;

% parse conditions
if iscategorical(response_conditions)
    condition_set = categories(response_conditions);
else
    condition_set = unique(response_conditions);
end
condition_count = numel(condition_set);

% iterate through conditions
for kk = 1 : condition_count
    condition_flags = response_conditions == condition_set(kk);
    response_flags = ...
        response_times ~= 0 & ...
        selection_flags & ...
        condition_flags;
    if sum(response_flags) == 0
        continue;
    end
    
    % compute trial count
    trial_count = numel(unique(response_trials(response_flags)));
    
    % compute response time pdf
    response_counts = ...
        histcounts(response_times(response_flags),binedges);
    response_rate = response_counts ./ binwidth ./ trial_count;
    
    % plot response rate
    histogram(ax,...
        'handlevisibility','off',...
        'bincounts',response_rate,...
        'binedges',binedges,...
        'edgecolor','none',...
        'facecolor',condition_clrs(kk,:),...
        'facealpha',.5);
    stairs(ax,...
        binedges,[response_rate,response_rate(end)],...
        'color',condition_clrs(kk,:),...
        'linewidth',1.5,...
        'linestyle','-');
end
end

%% plotting functions: switch times
function plotswitchtimes(ax_pdf,ax_cdf,...
    selected_trials,...
    switch_labels,...
    condition_label,...
    condition_clrs)

% bin settings
binedges = linspace(0,24,30);

% fetch relevant trial data
conditions = selected_trials.(condition_label);

% parse conditions
if iscategorical(conditions)
    condition_set = categories(conditions);
else
    condition_set = unique(conditions);
end
condition_count = numel(condition_set);

% iterate through conditions
for kk = 1 : condition_count
    condition_flags = conditions == condition_set(kk);
    if sum(condition_flags) == 0
        continue;
    end
    
    % trial data selection
    switch_times = selected_trials.switch.(switch_labels{1}).(switch_labels{2})(condition_flags);
    
    % compute switch time distribution
    switch_counts = histcounts(switch_times,binedges);
    switch_pdf = switch_counts ./ sum(switch_counts,'omitnan');
    switch_cdf = cumsum(switch_pdf);
    
    % plot switch PDF
    histogram(ax_pdf,...
        'bincounts',switch_pdf,...
        'binedges',binedges,...
        'edgecolor','none',...
        'facecolor',condition_clrs(kk,:),...
        'facealpha',.5);
    stairs(ax_pdf,...
        binedges,[switch_pdf,switch_pdf(end)],...
        'color',condition_clrs(kk,:),...
        'linewidth',1.5,...
        'linestyle','-');
    
    % plot switch CDF
    stairs(ax_cdf,...
        binedges,[switch_cdf,switch_cdf(end)],...
        'color',condition_clrs(kk,:),...
        'linewidth',1.5,...
        'linestyle','-');
end

% iterate through conditions
for kk = 1 : condition_count
    condition_flags = conditions == condition_set(kk);
    if sum(condition_flags) == 0
        continue;
    end
    
    % trial data selection
    switch_times = ...
        selected_trials.switch.(switch_labels{1}).(switch_labels{2})(condition_flags);
    
    % plot median switch times
    plot(ax_pdf,...
        [1,1]*median(switch_times,'omitnan'),...
        ylim(ax_pdf),...
        'color',condition_clrs(kk,:),...
        'linewidth',1.5,...
        'linestyle','--');
    plot(ax_cdf,...
        [1,1]*median(switch_times,'omitnan'),...
        ylim(ax_cdf),...
        'color',condition_clrs(kk,:),...
        'linewidth',1.5,...
        'linestyle','--');
end
end