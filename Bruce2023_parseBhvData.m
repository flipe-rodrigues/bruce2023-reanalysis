%% initialization
clear;
clc;

%% load data
sufix = 'bhvOpto';
% sufix = 'bhvPharm';
% sufix = 'bhvPharmSex';
load(sprintf('newdataSt_%s.mat',sufix));

%% parse group meta data
group_labels = fieldnames(group);
group_count = numel(group_labels);

% iterate through groups
manipulation_labels = {...
    'control',...
    'D1-MSN inhibition',...
    'D1-R antagonist',...
    'D1-R agonist',...
    'D2-MSN inhibition',...
    'D2-R antagonist',...
    'D2-R agonist'};
for gg = 1 : group_count
    label = group_labels{gg};
    temp = [group.(label){:}]';
    label = strrep(label,'Drug1','SCH23390');
    label = strrep(label,'Drug2','Quinpirole');
    label = strrep(label,'Drug3','SKF');
    label = strrep(label,'SCH23390','SCH');
    session_count = size(temp,1);
    if contains(label,'OptoD1')
        manipulation = repmat(manipulation_labels(2),session_count,1);
    elseif contains(label,'SCH')
        manipulation = repmat(manipulation_labels(3),session_count,1);
    elseif contains(label,'SKF')
        manipulation = repmat(manipulation_labels(4),session_count,1);
    elseif contains(label,'OptoD2')
        manipulation = repmat(manipulation_labels(5),session_count,1);
    elseif contains(label,'Sulpiride')
        manipulation = repmat(manipulation_labels(6),session_count,1);
    elseif contains(label,'Quinpirole')
        manipulation = repmat(manipulation_labels(7),session_count,1);
    else
        manipulation = repmat(manipulation_labels(1),session_count,1);
    end
    if contains(label,'Saline')
        manipulation = repmat(manipulation_labels(1),session_count,1);
    end
    group.(label) = cell2table([temp,manipulation],...
        'variablenames',{'date','animal','target'});
end

% pharm-specific relabeling
if contains(sufix,'pharm','IgnoreCase',true)
    if contains(sufix,'sex','IgnoreCase',true)
        group.SulpirideMale = [group.SulpirideMale;group.SalineSulpirideMale];
        group.SulpirideFemale = [group.SulpirideFemale;group.SalineSulpirideFemale];
        group.QuinpiroleMale = [group.QuinpiroleMale;group.SalineQuinpiroleMale];
        group.QuinpiroleFemale = [group.QuinpiroleFemale;group.SalineQuinpiroleFemale];
        group.SKFMale = [group.SKFMale;group.SalineSKFMale];
        group.SKFFemale = [group.SKFFemale;group.SalineSKFFemale];
        group.SCHMale = [group.SCHMale;group.SalineSCHMale];
        group.SCHFemale = [group.SCHFemale;group.SalineSCHFemale];
%         group.Sulpiride = [group.SulpirideMale;group.SulpirideFemale];
%         group.Quinpirole = [group.QuinpiroleMale;group.QuinpiroleFemale];
%         group.SKF = [group.SKFMale;group.SKFFemale];
%         group.SCH = [group.SCHMale;group.SCHFemale];
    else
        group.SCH = [group.SCH;group.Saline_SCH];
        group.Sulpiride = [group.Sulpiride;group.Saline_SUL];
    end
    group_fields = fieldnames(group);
    field_count = numel(group_fields);
    for ff = 1 : field_count
        field = group_fields{ff};
        if contains(field,'Saline') || ...
                contains(field,'Drug') || ...
                contains(field,'Switch') || ...
                contains(field,'SCH23390') || ...
                contains(field,'Low')
            group = rmfield(group,field);
        end
    end
    group_labels = fieldnames(group);
    group_count = numel(group_labels);
end

%% parse data

% animal meta data
animals = fieldnames(TrialAnSt);
animal_count = numel(animals);

% session meta data
session_count = numel(TrialAnSt);

% preallocation
trials = [];

% iterate through animals
for aa = 1 : animal_count
    animal = string(animals{aa});
    
    % preallocation
    animal_trials = [];

    % iterate through sessions
    for ss = 1 : session_count
        session_data = TrialAnSt(ss).(animal);
        if isempty(session_data)
            continue;
        end
        trial_count = numel(session_data);
        
        % parse meta data
        session_filename = session_data(1).mpc.MSN;
        session_date = session_data(1).mpc.StartDate;
        meta_fields = strsplit(session_filename,'_');
        
        % infer contingency
        contingency_flags = ...
            cellfun(@(x)contains(x,'6')&contains(x,'18'),meta_fields);
        contingency = meta_fields(contingency_flags);
        if contains(contingency,'6R') && contains(contingency,'18L')
            shortside_label = 'right';
            longside_label = 'left';
        elseif contains(contingency,'6L') && contains(contingency,'18R')
            shortside_label = 'left';
            longside_label = 'right';
        end
        
        % infer manipulation group
        manipulation_target = [];
        for gg = 1 : group_count
            session_flag = ...
                strcmpi(session_date,group.(group_labels{gg}).date) & ...
                strcmpi(animal,group.(group_labels{gg}).animal);
            if any(session_flag)
                animal_group = string(group_labels{gg});
                manipulation_target = ...
                    group.(group_labels{gg}).target(session_flag);
            end
        end
        if isempty(manipulation_target)
            continue;
        end
        manipulation_targets = categorical(...
            repmat(manipulation_target,trial_count,1),manipulation_labels);
        
        % parse session fields
        session_fields = fieldnames(session_data);
        field_count = numel(session_fields);
        
        % iterate through trials
        for tt = 1 : trial_count
            
            % iterate through session fields
            for ff = 1 : field_count
                field = session_fields{ff};
                if (isempty(session_data(tt).(field)) && ...
                        strcmpi(field,'rewardDelivery')) || ...
                        all(size(session_data(tt).(field)) == 0)
                    session_data(tt).(field) = nan;
                end
            end
        end
        
        %
        trial_idcs = (1 : trial_count)';
        intervals = [session_data.programmedDuration]' / 1e3;
        rewardDelivery_times = [session_data.rewardDelivery]';
        rewardCollection_times = [session_data.rewardCollection]';
        reward_flags = ~isnan(rewardDelivery_times);
        
        %
        if contains(sufix,'Opto') && isfield(session_data,'opto')
            % opto 1 -> laser OFF; opto 0 -> laser ON
            manipulation_flags = ~[session_data.opto]';
        else
            manipulation_flags = true(trial_count,1);
        end
        manipulation_targets(~manipulation_flags) = manipulation_labels(1);
        
        % compute choice category
        choice_categories = categorical(...
            (intervals == min(intervals) & reward_flags) + ...
            (intervals == min(intervals) & ~reward_flags) * 2 + ...
            (intervals == max(intervals) & reward_flags) * 3 + ...
            (intervals == max(intervals) & ~reward_flags) * 4,...
            [1,2,3,4],{'short','long','long','short'});
        choice_sides = categorical(...
            choice_categories == 'long',...
            [0,1],{shortside_label,longside_label});
        
        %%
        left_response_onset_times = {session_data.leftRspTimeTrial}';
        left_response_offset_times = {session_data.leftRelTimeTrial}';
        right_response_onset_times = {session_data.rightRspTimeTrial}';
        right_response_offset_times = {session_data.rightRelTimeTrial}';
        back_response_onset_times = {session_data.backRspTimeTrial}';
        back_response_offset_times = {session_data.backRelTimeTrial}';
        rwd_response_onset_times = {session_data.rwdRspTimeTrial}';
        rwd_response_offset_times = {session_data.rwdRelTimeTrial}';
        
        % preallocation
        response_onset_times = cell(trial_count,1);
        response_offset_times = cell(trial_count,1);
        response_ports = cell(trial_count,1);
        response_trials = cell(trial_count,1);
        response_manipulation = cell(trial_count,1);
        
        % iterate through trials
        for tt = 1 : trial_count
            
            % correct discrepancy in left response onset & offsets
            left_response_discrepancy = ...
                numel(left_response_onset_times{tt}) - ...
                numel(left_response_offset_times{tt});
            left_response_offset_times{tt} = [...
                left_response_offset_times{tt},...
                nan(1,left_response_discrepancy)];
            
            % correct discrepancy in right response onset & offsets
            right_response_discrepancy = ...
                numel(right_response_onset_times{tt}) - ...
                numel(right_response_offset_times{tt});
            right_response_offset_times{tt} = [...
                right_response_offset_times{tt},...
                nan(1,right_response_discrepancy)];
            
            % correct discrepancy in back response onset & offsets
            back_response_discrepancy = ...
                numel(back_response_onset_times{tt}) - ...
                numel(back_response_offset_times{tt});
            back_response_offset_times{tt} = [...
                back_response_offset_times{tt},...
                nan(1,back_response_discrepancy)];
            
            % correct discrepancy in reward response onset & offsets
            rwd_response_discrepancy = ...
                numel(rwd_response_onset_times{tt}) - ...
                numel(rwd_response_offset_times{tt});
            rwd_response_offset_times{tt} = [...
                rwd_response_offset_times{tt},...
                nan(1,rwd_response_discrepancy)];
            
            %
            response_onset_times{tt} = [...
                left_response_onset_times{tt}';...
                right_response_onset_times{tt}';...
                back_response_onset_times{tt}';...
                rwd_response_onset_times{tt}';...
                ];
            response_offset_times{tt} = [...
                left_response_offset_times{tt}';...
                right_response_offset_times{tt}';...
                back_response_offset_times{tt}';...
                rwd_response_offset_times{tt}';...
                ];
            response_ports{tt} = categorical([...
                zeros(size(left_response_onset_times{tt}'));...
                ones(size(right_response_onset_times{tt}'));...
                ones(size(back_response_onset_times{tt}'))*2;...
                ones(size(rwd_response_onset_times{tt}'))*3],...
                [0,1,2,3],{'left','right','back','hopper'});
            response_trials{tt} = repmat(trial_idcs(tt),size(response_onset_times{tt}));
            
            %
            [~,idcs] = sort(response_onset_times{tt});
            response_onset_times{tt} = response_onset_times{tt}(idcs);
            response_offset_times{tt} = response_offset_times{tt}(idcs);
            response_ports{tt} = response_ports{tt}(idcs);
            response_trials{tt} = response_trials{tt}(idcs);
            response_manipulation{tt} = ...
                repmat(manipulation_targets(tt),size(response_onset_times{tt}));
        end
        
        %
        response_durations = cellfun(...
            @(x,y) y - x,...
            response_onset_times,response_offset_times,...
            'uniformoutput',false);
        category_idcs = cellfun(...
            @(x) (x == shortside_label) + ...
            (x == longside_label) * 2 + ...
            (x == 'back') * 3 + ...
            (x == 'hopper') * 4,...
            response_ports,...
            'uniformoutput',false);
        response_categories = cellfun(...
            @(x) categorical(x,[1,2,3,4],...
            {'short','long','initiation','reward'}),...
            category_idcs,...
            'uniformoutput',false);
        
        %% switch times
        earlyswitch_arrival_times = [session_data.firstPoke]';
        try
            earlyswitch_departure_times = cellfun(@(x,y) nanmax(x(x < y)),...
                back_response_offset_times,num2cell(earlyswitch_arrival_times),...
                'uniformoutput',true);
        catch
            earlyswitch_departure_times = cellfun(@(x,y) nanmax(x(x < y)),...
                back_response_onset_times,num2cell(earlyswitch_arrival_times),...
                'uniformoutput',true);
        end
        lateswitch_departure_times = [session_data.SwitchDepart]';
        lateswitch_arrival_times = [session_data.SwitchArrival]';

        %% delays
        initiation_delays = [session_data.initiationRT]';
        earlyswitch_traversal_delays = ...
            earlyswitch_arrival_times - earlyswitch_departure_times;
        shortstay_durations = ...
            lateswitch_departure_times - earlyswitch_arrival_times;
        lateswitch_traversal_delays = ...
            lateswitch_arrival_times - lateswitch_departure_times;
        longstay_durations = ...
            [session_data.lastPoke]' - lateswitch_arrival_times;
        reaction_delays = [session_data.RT]';
        collection_delays = ...
            rewardCollection_times - [session_data.lastPoke]';
                iri_back = cellfun(@(x,y) diff(x(y == 'back')),...
            response_onset_times,response_ports,...
            'uniformoutput',false);
        iri_short = cellfun(@(x,y) diff(x(y == 'short')),...
            response_onset_times,response_categories,...
            'uniformoutput',false);
        iri_long = cellfun(@(x,y) diff(x(y == 'long')),...
            response_onset_times,response_categories,...
            'uniformoutput',false);
        iri_hopper = cellfun(@(x,y) diff(x(y == 'hopper')),...
            response_onset_times,response_ports,...
            'uniformoutput',false);
        
        %%
        
        % switch time table
        switch_table = table(...
            table(earlyswitch_departure_times,earlyswitch_arrival_times,...
            'variablenames',{'departure','arrival'}),...
            table(lateswitch_departure_times,lateswitch_arrival_times,...
            'variablenames',{'departure','arrival'}),...
            'variablenames',{'early','late'});
        
        % choice table
        choice_table = table(...
            intervals + reaction_delays,...
            choice_sides,...
            choice_categories,...
            'variablenames',{'time','side','category'});
        
        % reward table
        reward_table = table(...
            reward_flags,...
            rewardDelivery_times,...
            rewardCollection_times,...
            'variablenames',{'flag','delivery time','collection time'});
        
        % delay table
        delay_table = table(...
            earlyswitch_traversal_delays,...
            lateswitch_traversal_delays,...
            iri_back,...
            iri_short,...
            iri_long,...
            iri_hopper,...
            reaction_delays,...
            collection_delays,...
            'variablenames',{'early traversal time','late traversal time',...
            'IRI_{back}','IRI_{short}','IRI_{long}','IRI_{hopper}',...
            'reaction time','collection time'});
        
        % response table
        response_table = table(...
            response_trials,...
            response_onset_times,...
            response_durations,...
            response_ports,...
            response_categories,...
            response_manipulation,...
            'variablenames',{'trial','time','duration','port','category','manipulation'});
        
        % manipulation table
        manipulation_table = table(...
            manipulation_targets,...
            manipulation_targets,...
            'variablenames',{'target','treatment'});
        
        % session table
        session_trials = table(...
            repmat(animal_group,trial_count,1),...
            repmat(animal,trial_count,1),...
            repmat(ss,trial_count,1),...
            repmat(contingency,trial_count,1),...
            manipulation_targets,...
            trial_idcs,...
            intervals,...
            switch_table,...
            choice_table,...
            reward_table,...
            delay_table,...
            response_table,...
            'variablenames',...
            {'group','animal','session','contingency','manipulation',...
            'index','interval','switch','choice','reward','delays','responses'});
        
        % append to the current animal's table
        animal_trials = [animal_trials; session_trials];
    end
    
    % append to the current animal's table
    trials = [trials; animal_trials];
end

%% categorical conversion
trials.group = categorical(cellstr(trials.group));
trials.animal = categorical(cellstr(trials.animal));
trials.contingency = categorical(trials.contingency);

%% outlier exclusion
outlier_flags = ...
    trials.delays.('early traversal time') > ...
        quantile(trials.delays.('early traversal time'),.99) | ...
    trials.delays.('late traversal time') > ...
        quantile(trials.delays.('late traversal time'),.99) | ...
    trials.delays.('reaction time') > ...
        quantile(trials.delays.('reaction time'),.99) | ...
    trials.delays.('collection time') > ...
        quantile(trials.delays.('collection time'),.99);
trials = trials(~outlier_flags,:);
mean(~outlier_flags)

%% display data summary
summary(trials);
head(trials)
tail(trials)

%% save data
save_file = fullfile(pwd,sprintf('trials_%s.mat',sufix));
save(save_file,'trials');